if {[have_spec arm]} { assert_spec arm_v7 }

build {
	core lib/ld init timer lib/vfs lib/libc
	server/vfs_block
	server/vfs
	lib/vfs_rump
	lib/vfs_import
	test/libc_vfs
}

#
# Check used commands
#
set mkfs [installed_command mkfs.vfat]
set dd   [installed_command dd]

#
# Build FAT-file-system image
#
catch { exec $dd if=/dev/zero of=bin/fs.raw bs=1M count=16 }
catch { exec $mkfs -F16 bin/fs.raw }

create_boot_directory

install_config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="vfs_block">
		<resource name="RAM" quantum="30M"/>
		<provides><service name="Block"/></provides>
		<config>
			<vfs>
				<ram/>
				<import>
					<rom name="fs.raw"/>
				</import>
			</vfs>
			<default-policy root="/" file="fs.raw" block_size="512"
			                writeable="yes"/>
		</config>
	</start>
	<start name="vfs" caps="200">
		<resource name="RAM" quantum="30M" />
		<provides><service name="File_system"/></provides>
		<config>
			<vfs>
				<rump fs="msdos" ram="8M"/>
			</vfs>
			<default-policy root="/" writeable="yes"/>
		</config>
	</start>
	<start name="test-libc_vfs">
		<resource name="RAM" quantum="4M"/>
		<config>
			<libc stdout="/dev/log"/>
			<vfs>
				<dir name="dev"> <log/> </dir>
				<fs/>
			</vfs>
		</config>
	</start>
</config>}

build_boot_image [list {*}[build_artifacts] fs.raw]

append qemu_args "  -nographic "

run_genode_until {.*child "test-libc_vfs" exited with exit value 0.*} 60

exec rm -f bin/fs.raw
puts "\nTest succeeded\n"
